#version 330 core

out vec4 FragColor;


in vec3 Normal;
in vec3 FragPos;
in vec2 TexCoord;

uniform sampler2D ourTexture;
uniform sampler2D ourTexture2;
uniform float opacity;
uniform float ambientStrength;
uniform vec3 lightSourcePos;
uniform vec3 lightColor;
uniform vec3 viewPos; 

void main()
{
	// texture mix
	vec4 textureMix = mix(texture(ourTexture, TexCoord), texture(ourTexture2, TexCoord), opacity);

	// ambient
	vec4 ambient = vec4(ambientStrength * lightColor, 1.0);

	// diffuse
	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(lightSourcePos - FragPos);
	float diff = max(dot(norm, lightDir), 0.0);
	vec4 diffuse = vec4(diff * lightColor, 1.0);

    // specular
    float specularStrength = 0.5;
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec4 specular = vec4(specularStrength * spec * lightColor, 1.0); 
	
    vec4 result = (ambient + diffuse + specular) * textureMix;

	FragColor = result;
};